# coding=utf-8
import asyncio
import logging
import os.path
import aiogram.types

from aiogram import Bot, types, Router, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters.command import Command
from aiogram.filters import CommandStart, CommandObject
from aiogram.utils.deep_linking import create_start_link

from db.db_manage import *
from config import TOKEN

from modules import admins_list
from modules.buttons_list import *
from modules.chat_type import ChatTypeFilter

bot = Bot(token=TOKEN)
router = Router()

admin = admins_list.ADMINS[1]


class PaymentStage(StatesGroup):
    waiting_for_pending = State()


async def get_logs(text, username='Anonim', name='Anonim'):
    now = datetime.now()
    now_file = datetime.strftime(now, '%d_%m')
    now_info = datetime.strftime(now, '%d.%m %H:%M:%S')
    logs_text = ''
    if os.path.isfile(f"logs/logs_{now_file}.txt"):
        with open(f"logs/logs_{now_file}.txt", "r", encoding="utf-8") as read_logs:
            logs_text = read_logs.read()

    logs_text = logs_text + f'## {now_info} ## @{username} ({name}) {text}\n'

    with open(f"logs/logs_{now_file}.txt", "w", encoding="utf-8") as write_logs:
        write_logs.write(logs_text)


async def get_info_about_user_message(message):  # –ò–Ω—Ñ–∞ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    text = f'\n##### {datetime.now()} #####\n'
    text += f'ID: {message.from_user.id}, Text: {message.text}, Chat ID: {message.chat.id}'
    try:
        text += f'\nUsername: {message.from_user.username},' \
                f' Name: {message.from_user.first_name},' \
                f' Surname: {message.from_user.last_name} '
    except Exception as e:
        logging.exception(e)
        text += '–ù–µ—Ç –∏–º–µ–Ω–∏'
    return text


async def get_info_about_user_callback(callback):  # –ò–Ω—Ñ–∞ –æ –∫–æ–ª–ª–±–µ–∫–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    text = f'\n##### {datetime.now()} #####\n'
    text += f'ID: {callback.from_user.id}, Text: {callback.data}'
    try:
        text += f'\nUsername: {callback.from_user.username},' \
                f' Name: {callback.from_user.first_name},' \
                f' Surname: {callback.from_user.last_name} '
    except Exception as e:
        logging.exception(e)
        text += '–ù–µ—Ç –∏–º–µ–Ω–∏'
    return text


@router.message(ChatTypeFilter(chat_type=["private"]), Command(commands=["start"]))
@router.message(CommandStart(deep_link=True))
async def cmd_start(message: types.Message, command: CommandObject):
    print(await get_info_about_user_message(message))
    await bot.send_chat_action(chat_id=message.chat.id, action='typing')

    text = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–º–æ—â–Ω–∏–∫–∞ –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞, –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–± —ç—Ç–æ–º –±–æ—Ç–µ –º—ã —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∏ –≤ –≤–∏–¥–µ–æ:\nhttps://youtu.be/Gnpx6p-xMjU'

    user_id = message.from_user.id
    chk = await check_user_id(user_id)
    if not chk:
        balance = START_BONUS
        code = command.args
        if code is not None and code.isdigit() and code != message.from_user.id:
            chk_ref = await check_user_id(int(code))
            if not chk_ref:
                code = None
            else:
                code = int(code)
                balance += REF_INV_BONUS
                if message.from_user.username is not None:
                    await bot.send_message(chat_id=code,
                                           text=f'–£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª {message.from_user.first_name}'
                                                f' - @{message.from_user.username}')
                else:
                    await bot.send_message(chat_id=code,
                                           text=f'–£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª {message.from_user.first_name}')
                await add_money(code, balance)
            text += f'\n<i>(–í–∞—à –±–æ–Ω—É—Å: ${balance} –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ)</i>'
        await create_user(user_id, message.from_user.username, balance, code)
        text += '\n<i>(–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω)</i>'

    await message.answer(text, reply_markup=get_menu_kb(), parse_mode='HTML')


@router.message(Command(commands=["about"]))
@router.message(F.text == '‚ùî –û–± —ç—Ç–æ–º –±–æ—Ç–µ')
async def cmd_profile(message: types.Message):
    print(await get_info_about_user_message(message))
    await bot.send_chat_action(chat_id=message.chat.id, action='typing')

    text = f"–≠—Ç–∏ –∑–æ–Ω—ã –ø–æ–∫—É–ø–æ–∫ –∏ –ø—Ä–æ–¥–∞–∂ —ç—Ç–æ –∞–ª–≥–æ—Ä–∏—Ç–º, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–ª –º–æ–π —Ç–æ–≤–∞—Ä–∏—â –∏ —Ç—Ä–µ–π–¥–µ—Ä —Å –æ–≥—Ä–æ–º–Ω—ã–º —Å—Ç–∞–∂–µ–º, " \
           f"—ç—Ç–æ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–µ –∏–º–µ–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ –∞–Ω–∞–ª–æ–≥–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –¥–ª—è —Ç–µ—Ö –∫–æ–º—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ - –æ–Ω–∏ –Ω–µ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞—Ö –∫–∞–∫ —É –≤—Å–µ—Ö, –∏ —ç—Ç–æ –Ω–µ –∑–æ–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏-—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è.\n" \
           f"–û–Ω–∏ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–µ—â–∞—Ö:\n" \
           f"–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ —Ñ—Ä–∞–∫—Ç–∞–ª—ã –∏ —Ä–µ–∞–ª—å–Ω—ã–µ –±–∏—Ä–∂–µ–≤—ã–µ –æ–±—ä–µ–º—ã.\n" \
           f"–ü–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–æ–Ω–µ—á–Ω–æ –∂–µ –Ω–∏–∫—Ç–æ –Ω–µ –¥–∞—Å—Ç, –Ω–æ –¥—É–º–∞—é —á—Ç–æ –≤–∞–∂–Ω–µ–µ —Ç–æ —á—Ç–æ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∫–∏–º-—Ç–æ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏–º —á—É–¥–æ–º, –∞ –Ω–µ —Ç–æ –ø–æ –∫–∞–∫–æ–º—É –ø—Ä–∏–Ω—Ü–∏–ø—É –æ–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç.\n\n" \
           f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞ - @cryptolog_admin"

    await message.answer(text, reply_markup=get_menu_kb(), parse_mode='HTML')


@router.message(Command(commands=["profile"]))
@router.message(F.text == 'üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å')
async def cmd_profile(message: types.Message):
    print(await get_info_about_user_message(message))
    await bot.send_chat_action(chat_id=message.chat.id, action='typing')

    text = f'üë§ {message.from_user.first_name}\n\n' \
           f'<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n'
    payment_time = await check_payment_time(message.from_user.id)

    if payment_time < 0:
        text += f'üí≥ –ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫'
    else:
        days = round(payment_time / 60 / 60 / 24)
        days_end = datetime.today() + timedelta(days=1)
        text += f"üí≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: {days} ({days_end.strftime('%a, %d %b %Y')})\n\n"
        # text += '–î–æ—Å—Ç—É–ø—ã: \n' \
        #         '–†–∞–∑ - \n' \
        #         '–î–≤–∞ - '

    await message.answer(text, reply_markup=get_menu_kb(), parse_mode='HTML')


@router.message(Command(commands=["stats"]))
@router.message(F.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def cmd_profile(message: types.Message):
    print(await get_info_about_user_message(message))
    await bot.send_chat_action(chat_id=message.chat.id, action='typing')

    stats = await get_stats_all()
    one, three, one_prem, three_prem = stats[0], stats[1], stats[2], stats[3]

    buyers = await count_users_buyers()
    buyers_month = await get_stats_of_month()

    full_money = one * RATES['one'] + three * RATES['three'] + one_prem * RATES['one_prem'] + three_prem * RATES['three_prem']
    month_money = buyers_month[0] * RATES['one'] + buyers_month[1] * RATES['three'] + buyers_month[2] * RATES['one_prem'] + buyers_month[3] * RATES['three_prem']

    users = await count_users()

    text = f'<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n' \
           f'–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}\n' \
           f'–ö–æ–ª-–≤–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π: {buyers}\n\n' \
           f'–ù–∞ —Å–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤ –∫—É–ø–ª–µ–Ω–æ (–±–µ–∑ —á–∞—Ç–∞):\n' \
           f'-- 1 –º–µ—Å—è—Ü: {one}\n' \
           f'-- 3 –º–µ—Å—è—Ü–∞: {three}\n\n' \
           f'–ù–∞ —Å–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤ –∫—É–ø–ª–µ–Ω–æ (—Å —á–∞—Ç–æ–º):\n' \
           f'-- 1 –º–µ—Å—è—Ü: {one_prem}\n' \
           f'-- 3 –º–µ—Å—è—Ü–∞: {three_prem}\n\n' \
           f'–ü—Ä–∏–±—ã–ª—å –∑–∞ –º–µ—Å—è—Ü: ${month_money}\n' \
           f'–ü—Ä–∏–±—ã–ª—å –≤—Å–µ–≥–æ: ${full_money}\n'

    await message.answer(text, reply_markup=get_menu_kb(), parse_mode='HTML')


@router.message(Command(commands=["balance"]))
@router.message(F.text == 'üí∞ Balance')
async def cmd_check_balance(message: types.Message):
    print(await get_info_about_user_message(message))
    await bot.send_chat_action(chat_id=message.chat.id, action='typing')

    user_id = message.from_user.id
    balance = await get_balance(user_id)
    text = (f'ü™ô <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> ü™ô\n'
            f'{int(balance)}')
    await message.answer(text, reply_markup=get_menu_kb(), parse_mode='HTML')
    await get_logs(f'–ø—Ä–æ–≤–µ—Ä–∏–ª —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É {int(balance)} –∫–æ–∏–Ω–æ–≤', message.from_user.username,
                   message.from_user.first_name)


@router.message(Command(commands=["clear"]))
async def cmd_check_stats(message: types.Message):
    a = await message.answer('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∞', reply_markup=aiogram.types.ReplyKeyboardRemove())
    await asyncio.sleep(1)
    await a.delete()
